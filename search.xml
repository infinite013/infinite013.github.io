<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>fasterrcnn详解</title>
      <link href="/2020/03/31/fasterrcnn%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/03/31/fasterrcnn%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="fasterrcnn结构概览"><a href="#fasterrcnn结构概览" class="headerlink" title="fasterrcnn结构概览"></a>fasterrcnn结构概览</h2><p><img src="./images/1585638306310.png" alt="enter description here"><br>    上图为论文中的总体结构，在作者看来，主要分为四个部分：</p><ol><li><p>Conv layers。作为一种CNN网络目标检测方法，Faster RCNN首先使用一组基础的conv+relu+pooling层提取image的feature maps。该feature maps被共享用于后续RPN层和全连接层。</p></li><li><p>Region Proposal Networks。RPN网络用于生成region proposals。该层通过softmax判断anchors属于positive或者negative，再利用bounding box regression修正anchors获得精确的proposals。</p></li><li><p>Roi Pooling。该层收集输入的feature maps和proposals，综合这些信息后提取proposal feature maps，送入后续全连接层判定目标类别。</p></li><li><p>Classification。利用proposal feature maps计算proposal的类别，同时再次bounding box regression获得检测框最终的精确位置。</p><p> 另一种结构图如下所示：<img src="./images/1585638536121.png" alt="enter description here"><br> 表示为python版本中的VGG16模型中的faster_rcnn_test.pt的网络结构，可以清晰的看到该网络对于一副任意大小PxQ的图像，首先缩放至固定大小MxN，然后将MxN图像送入网络；而Conv layers中包含了13个conv层+13个relu层+4个pooling层；RPN网络首先经过3x3卷积，再分别生成positive anchors和对应bounding box regression偏移量，然后计算出proposals；而Roi Pooling层则利用proposals从feature maps中提取proposal feature送入后续全连接和softmax网络作classification（即分类proposal到底是什么object）。</p></li></ol><h2 id="RPN-Region-Proposal-Networks-到底是什么"><a href="#RPN-Region-Proposal-Networks-到底是什么" class="headerlink" title="RPN(Region Proposal Networks)到底是什么"></a>RPN(Region Proposal Networks)到底是什么</h2><p>   到底什么是RPN呢，他又起了什么作用呢？我们首先来看RPN的网络结构<img src="./images/1585638901287.png" alt="enter description here"><br>    具体来说，我们可以将它分解为两条路径，上方的一条路径通过softmax对anchor进行一个<strong>二分类</strong>，区分positive和negative的anchor，下方路径计算anchor对于bbx的偏移量，获得精确的proposal，<strong>最后的Proposal层则负责综合positive anchors和对应bounding box regression偏移量获取proposals，同时剔除太小和超出边界的proposals。其实整个网络到了Proposal Layer这里，就完成了相当于目标定位的功能</strong>。<br>    其实RPN最终就是在原图尺度上，设置了密密麻麻的候选Anchor。然后用cnn去判断哪些Anchor是里面有目标的positive anchor，哪些是没目标的negative anchor。</p><h3 id="anchor"><a href="#anchor" class="headerlink" title="anchor"></a>anchor</h3><p>   提到RPN，就离不开anchor。所谓anchors，实际上就是一组由rpn/generate_anchors.py生成的矩形，直接运行mmdetection中的anchor生成代码，可以得到以下输出：<br>`[[ -84.  -40. 99.  55.]</p><p> [-176.  -88.  191.  103.]<br> [-360. -184.  375.  199.]<br> [ -56.  -56.   71.   71.]<br> [-120. -120.  135.  135.]<br> [-248. -248.  263.  263.]<br> [ -36.  -80.   51.   95.]<br> [ -80. -168.   95.  183.]<br> [-168. -344.  183.  359.]]</p><p> `<br><img src="./images/1585641076072.png" alt="enter description here"><br>     这就是生成的anchor，其中每行的4个值(x1,y1,x2,y2)表矩形左上和右下角点坐标。9个矩形共有3种形状，长宽比为大约为 三种，如图6。实际上通过anchors就引入了检测中常用到的多尺度方法。<br>    对于维度是(W,H)的特征图来说，其生成的anchor个数为WxHx9个，这些anchor对应这特征图上的各个部分，然后对这些anchor进行判定，判定其中是否包含正样本(即包含可能的目标)<br>    当然，在获得positive anchor后，我们要对anchor进行微调，让他更接近真实的bbx，这就称作bounding box regression。</p><h3 id="bounding-box-regression"><a href="#bounding-box-regression" class="headerlink" title="bounding box regression"></a>bounding box regression</h3><p>如下图所示绿色框为飞机的Ground Truth(GT)，红色为提取的positive anchors，即便红色的框被分类器识别为飞机，但是由于红色的框定位不准，这张图相当于没有正确的检测出飞机。所以我们希望采用一种方法对红色的框进行微调，使得positive anchors和GT更加接近。<br>   <img src="./images/1585642011799.png" alt="enter description here"><br>   对于窗口一般使用四维向量(x,y,w,h)表示，分别表示窗口的中心点坐标和宽高，对于下图，红色的框A代表原始的positive Anchors，绿色的框G代表目标的GT，我们的目标是寻找一种关系，使得输入原始的anchor A经过映射得到一个跟真实窗口G更接近的回归窗口G’，即：<br>   <img src="./images/1585642357374.png" alt="enter description here"><br>   那么经过何种变换F才能从图中的anchor A变为G’呢？ 比较简单的思路就是:<br><img src="./images/1585642587208.png" alt="enter description here"><br>    需要学习的是四个变换:$  x^2 +\sqrt{y}$</p>]]></content>
      
      
      <categories>
          
          <category> cv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cv </tag>
            
            <tag> fasterrcnn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客上传</title>
      <link href="/2020/03/26/%E5%8D%9A%E5%AE%A2%E4%B8%8A%E4%BC%A0/"/>
      <url>/2020/03/26/%E5%8D%9A%E5%AE%A2%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<p>在git bash下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"新的博客"</span></span><br></pre></td></tr></table></figure><p>之后对新的博客.md进行编辑，修改对应的tag以及categories<br>修改完成之后可以对博客进行预览</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>上传的具体方法为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure><p>就大功告成了</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
